// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SENIOR_MENTOR
  MENTOR
  MENTEE
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String
  token        String?
  role         Role
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  seniorMentor SeniorMentor?
  mentor       Mentor?
  mentee       Mentee?
  admin        Admin?

  @@map("users")
}

model Admin {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phoneNumber    String?  @map("phone_number")
  profilePicture String?  @map("profile_picture")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model SeniorMentor {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phoneNumber    String?  @map("phone_number")
  profilePicture String?  @map("profile_picture")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  mentors        Mentor[]

  @@map("senior_mentors")
}

model Mentor {
  id             Int          @id @default(autoincrement())
  userId         Int          @unique @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  seniorMentorId Int          @map("senior_mentor_id")
  seniorMentor   SeniorMentor @relation(fields: [seniorMentorId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phoneNumber    String?      @map("phone_number")
  profilePicture String?      @map("profile_picture")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  class          Class?

  @@map("mentors")
}

model Mentee {
  id             Int           @id @default(autoincrement())
  userId         Int           @unique @map("user_id")
  user           User          @relation(fields: [userId], references: [id])
  name           String
  email          String?
  batch          String?
  phoneNumber    String?       @map("phone_number")
  profilePicture String?       @map("profile_picture")
  university     String?
  major          String?
  menteeClass    MenteeClass[]

  @@map("mentees")
}

model Class {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  mentorId    Int?          @unique @map("mentor_id")
  mentor      Mentor?       @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  menteeClass MenteeClass[]

  @@map("classes")
}

model MenteeClass {
  menteeId Int
  mentee   Mentee @relation(fields: [menteeId], references: [id], onDelete: Cascade)
  classId  Int
  class    Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([menteeId, classId])
  @@map("mentee_classes")
}
